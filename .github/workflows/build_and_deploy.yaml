name: Build and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4

      # Conditional SWIG setup for Linux runners
      - name: Setup SWIG (Linux)
        if: runner.os == 'Linux'
        uses: mmomtchev/setup-swig@v4
        with:
          branch: jse

      # Setup SWIG for macOS runners using Homebrew
      - name: Setup SWIG (macOS)
        if: runner.os == 'macOS'
        run: brew install swig

      - name: Verify SWIG
        run: swig -version
      
      # --- Conditional cibuildwheel step for Linux builds ---
      - name: Build wheels (Linux)
        if: runner.os == 'Linux'
        uses: pypa/cibuildwheel@v2.22
        with:
          output-dir: wheelhouse
        env:
          # Simplified CIBW_BEFORE_BUILD: only system-level package installation
          CIBW_BEFORE_BUILD: |
            set -euo pipefail # Exit on error, unset vars
            echo "Installing build dependencies for Linux: swig and python3-devel..."
            /usr/bin/yum update -y && /usr/bin/yum install -y swig python3-devel
            echo "Build dependencies installed."
          
          # IMPORTANT: CMake options for Python finding must be here,
          # as cibuildwheel handles the ${PYTHON_*} variable expansion before passing to CMake.
          CIBW_CMAKE_OPTIONS: >
            -DPython_EXECUTABLE="${PYTHON_BIN}"
            -DPython3_EXECUTABLE="${PYTHON_BIN}"
            -DPython_INCLUDE_DIR="${PYTHON_INCLUDE_DIR}"
            -DPython3_INCLUDE_DIR="${PYTHON_INCLUDE_DIR}"
            -DPython_LIBRARY="${PYTHON_LIB}"
            -DPython3_LIBRARY="${PYTHON_LIB}"
            -DPython_ROOT_DIR="$(dirname "$(dirname "$PYTHON_BIN")")"
            -DPython3_ROOT_DIR="$(dirname "$(dirname "$PYTHON_BIN")")"
            -DPython_FIND_STRATEGY=LOCATION
            -DPython_FIND_REGISTRY=NEVER
            -DPython_FIND_FRAMEWORK=NEVER
            -DPython3_LIBRARIES="${PYTHON_LIB}" # More explicit for CMake's Python3_LIBRARIES
            -DPython3_FIND_DEBUG=ON # This should now work to give verbose output!

          CIBW_SKIP: pp* cp36* cp37* cp38* *-win32 *-manylinux_i686 *-musllinux_*
          MACOSX_DEPLOYMENT_TARGET: 14 

      # --- Conditional cibuildwheel step for macOS builds ---
      - name: Build wheels (macOS)
        if: runner.os == 'macOS'
        uses: pypa/cibuildwheel@v2.22
        with:
          output-dir: wheelhouse
        env:
          CIBW_SKIP: pp* cp36* cp37* cp38* *-win32 *-manylinux_i686 *-musllinux_*
          MACOSX_DEPLOYMENT_TARGET: 14

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-wheelhouse
          path: wheelhouse

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Set up environment
        run: |
          python -m pip install scikit-build-core build

      - name: Build and check sdist
        run: |
          python -m build --sdist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          name: sourcedist

  deploy:
    runs-on: ubuntu-latest
    needs: [build-wheel, build-sdist]
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}
    environment: deployment
    permissions:
      id-token: write # Required for OIDC authentication with PyPI

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.3
