name: Build and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4

      # Setup SWIG - This step is correctly placed and configured.
      - name: Setup SWIG
        uses: mmomtchev/setup-swig@v4 # Use the latest version or a specific one
        with:
          branch: jse

      - name: Verify SWIG
        run: swig -version
    
      # Set up Python for cibuildwheel itself (on the host runner).
      # cibuildwheel is a Python tool and needs a Python environment to run.
      - name: Set up Python for cibuildwheel
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Using 3.10 for consistency with build-sdist job

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22
        with:
          output-dir: wheelhouse
        env:
          # CIBW_BEFORE_BUILD_LINUX executes a command inside the Linux build container.
          # The 'manylinux' containers are CentOS-based and use 'yum'.
          # This installs the Python development headers required by CMake to find Python.
          CIBW_BEFORE_BUILD_LINUX: "yum install -y python3-devel"
          # CIBW_BEFORE_BUILD_MACOS: "" # Add if macOS builds need specific dependencies installed before build

          # CIBW_SKIP defines which Python versions/platforms to skip building.
          CIBW_SKIP: pp* cp36* cp37* cp38* *-win32 *-manylinux_i686 *-musllinux_*
          # MACOSX_DEPLOYMENT_TARGET is an environment variable for cibuildwheel on macOS.
          MACOSX_DEPLOYMENT_TARGET: 14

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-wheelhouse
          path: wheelhouse

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up environment
        run: |
          python -m pip install scikit-build-core build

      - name: Build and check sdist
        run: |
          python -m build --sdist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          name: sourcedist

  deploy:
    runs-on: ubuntu-latest
    needs: [build-wheel, build-sdist]
    # This condition ensures deployment only happens on tag pushes or manual workflow_dispatch.
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}
    environment: deployment
    permissions:
      id-token: write # Required for OIDC authentication with PyPI

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true # Merges artifacts from previous jobs into one 'dist' directory
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.3 # Publishes the collected wheels and sdist to PyPI
