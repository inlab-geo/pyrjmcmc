name: Build and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4

      # Conditional SWIG setup for Linux runners
      - name: Setup SWIG (Linux)
        if: runner.os == 'Linux'
        uses: mmomtchev/setup-swig@v4
        with:
          branch: jse

      # Setup SWIG for macOS runners using Homebrew
      - name: Setup SWIG (macOS)
        if: runner.os == 'macOS'
        run: brew install swig

      - name: Verify SWIG
        run: swig -version
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22
        with:
          output-dir: wheelhouse
          # Define before-build directly in the YAML for debugging.
          # This overrides the pyproject.toml's before-build for the current run.
          before-build: |
            echo "--- Debugging Python Paths (inside manylinux container) ---"
            echo "PYTHON_BIN: $PYTHON_BIN"
            echo "PYTHON_INCLUDE_DIR: $PYTHON_INCLUDE_DIR"
            echo "PYTHON_LIB: $PYTHON_LIB"
            
            echo ""
            echo "Listing contents of Python include directory:"
            # List contents of the directory, showing all files, even hidden ones.
            ls -al "$PYTHON_INCLUDE_DIR" || true
            echo ""
            echo "Attempting to find Python.h:"
            find "$PYTHON_INCLUDE_DIR" -name "Python.h" || true

            echo ""
            echo "Listing contents of Python library directory:"
            # List contents of the directory where PYTHON_LIB points, and its parent
            ls -al "$(dirname "$PYTHON_LIB")" || true
            echo ""
            echo "Attempting to find libpython*.so or libpython*.a:"
            find "$(dirname "$PYTHON_LIB")" -name "libpython*.so" || true
            find "$(dirname "$PYTHON_LIB")" -name "libpython*.a" || true
            
            echo "--- End Debugging ---"
            
            # Re-add your original yum install swig from pyproject.toml here
            # since this 'before-build' overrides it for debugging.
            yum update -y && yum install -y swig

        env:
          CIBW_CMAKE_OPTIONS: >
            -DPython_EXECUTABLE="$PYTHON_BIN"
            -DPython3_EXECUTABLE="$PYTHON_BIN"
            -DPython_INCLUDE_DIR="$PYTHON_INCLUDE_DIR"
            -DPython3_INCLUDE_DIR="$PYTHON_INCLUDE_DIR"
            # Explicitly point to the library file.
            # Make sure $PYTHON_LIB is the full path to the .so/.a file.
            # If $PYTHON_LIB is just the directory, you might need to append the filename.
            # cibuildwheel's $PYTHON_LIB usually points to the file itself.
            -DPython_LIBRARY="$PYTHON_LIB"
            -DPython3_LIBRARY="$PYTHON_LIB"
            -DPython_ROOT_DIR="$(dirname "$(dirname "$PYTHON_BIN")")"
            -DPython3_ROOT_DIR="$(dirname "$(dirname "$PYTHON_BIN")")"
            -DPython_FIND_STRATEGY=LOCATION
            -DPython_FIND_REGISTRY=NEVER

          CIBW_SKIP: pp* cp36* cp37* cp38* *-win32 *-manylinux_i686 *-musllinux_*
          MACOSX_DEPLOYMENT_TARGET: 14

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-wheelhouse
          path: wheelhouse

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Set up environment
        run: |
          python -m pip install scikit-build-core build

      - name: Build and check sdist
        run: |
          python -m build --sdist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          name: sourcedist

  deploy:
    runs-on: ubuntu-latest
    needs: [build-wheel, build-sdist]
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}
    environment: deployment
    permissions:
      id-token: write # Required for OIDC authentication with PyPI

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.3
