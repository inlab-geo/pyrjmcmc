name: Build and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4

      # Conditional SWIG setup for Linux runners
      - name: Setup SWIG (Linux)
        if: runner.os == 'Linux'
        uses: mmomtchev/setup-swig@v4
        with:
          branch: jse

      # Setup SWIG for macOS runners using Homebrew
      - name: Setup SWIG (macOS)
        if: runner.os == 'macOS'
        run: brew install swig

      - name: Verify SWIG
        # This will run on both OSes after the respective setup step
        run: swig -version
      
      # Removed: actions/setup-python@v5 - cibuildwheel manages its own Python environments for builds.
      # The runner will have a default Python sufficient to execute cibuildwheel.

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22
        with:
          output-dir: wheelhouse
          # 'before-build' is now defined in pyproject.toml, so no need to repeat it here.
          # cibuildwheel will automatically pick it up from [tool.cibuildwheel.linux]
        env:
          # This is an excellent way to pass CMake arguments directly!
          # Simplification: Let CMake's FindPython module infer paths from the executable.
          CIBW_CMAKE_OPTIONS: >
            -DPython_EXECUTABLE="$PYTHON_BIN"
            -DPython3_EXECUTABLE="$PYTHON_BIN"
            -DPython_FIND_STRATEGY=LOCATION
            -DPython_FIND_REGISTRY=NEVER

          CIBW_SKIP: pp* cp36* cp37* cp38* *-win32 *-manylinux_i686 *-musllinux_*
          
          MACOSX_DEPLOYMENT_TARGET: 14

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-wheelhouse
          path: wheelhouse

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          # Using a specific Python version for building the sdist
          # This is the environment where the 'build' tool will run.
          python-version: '3.10' 

      - name: Set up environment
        run: |
          # Install the 'scikit-build-core' and 'build' packages
          # 'build' is used to create the source distribution.
          python -m pip install scikit-build-core build

      - name: Build and check sdist
        run: |
          # Create the source distribution
          python -m build --sdist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          name: sourcedist # Corrected name and path

  deploy:
    runs-on: ubuntu-latest
    needs: [build-wheel, build-sdist]
    # This condition ensures deployment only happens on version tags or manual workflow dispatch.
    # It prevents accidental deployments from other triggers like pull requests.
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}
    environment: deployment
    permissions:
      id-token: write # Required for OIDC authentication with PyPI

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # Merge all downloaded artifacts (wheels and sdist) into a single 'dist' directory.
          merge-multiple: true
          path: dist

      - name: Publish package to PyPI
        # This action uses OIDC authentication by default when 'id-token: write' permission is granted.
        uses: pypa/gh-action-pypi-publish@v1.12.3
