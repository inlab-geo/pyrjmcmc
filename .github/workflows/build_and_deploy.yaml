name: Build and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4

      # Conditional SWIG setup for Linux runners
      - name: Setup SWIG (Linux)
        if: runner.os == 'Linux'
        uses: mmomtchev/setup-swig@v4
        with:
          branch: jse

      # Setup SWIG for macOS runners using Homebrew
      - name: Setup SWIG (macOS)
        if: runner.os == 'macOS'
        run: brew install swig

      - name: Verify SWIG
        run: swig -version
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22
        with:
          output-dir: wheelhouse
          # The 'before-build' hook and CIBW_CMAKE_OPTIONS must be
          # passed as environment variables to the cibuildwheel action.
          # NOT as direct inputs under 'with:'.

        env: # <--- This is the crucial change for CIBW_BEFORE_BUILD and CIBW_CMAKE_OPTIONS
          CIBW_BEFORE_BUILD: |
            # Write diagnostic script to a temporary file
            echo '#!/bin/bash' > /tmp/debug_python_paths.sh
            echo 'set -euo pipefail' >> /tmp/debug_python_paths.sh # Exit on error, unset vars
            echo 'echo "--- Debugging Python Paths (inside manylinux container) ---"' >> /tmp/debug_python_paths.sh
            echo 'echo "PYTHON_BIN: ${PYTHON_BIN}"' >> /tmp/debug_python_paths.sh
            echo 'echo "PYTHON_INCLUDE_DIR: ${PYTHON_INCLUDE_DIR}"' >> /tmp/debug_python_paths.sh
            echo 'echo "PYTHON_LIB: ${PYTHON_LIB}"' >> /tmp/debug_python_paths.sh
            echo 'echo ""' >> /tmp/debug_python_paths.sh
            echo 'echo "Listing contents of Python include directory:"' >> /tmp/debug_python_paths.sh
            echo 'ls -al "${PYTHON_INCLUDE_DIR}" || true' >> /tmp/debug_python_paths.sh
            echo 'echo ""' >> /tmp/debug_python_paths.sh
            echo 'echo "Attempting to find Python.h:"' >> /tmp/debug_python_paths.sh
            echo 'find "${PYTHON_INCLUDE_DIR}" -name "Python.h" || true' >> /tmp/debug_python_paths.sh
            echo 'echo ""' >> /tmp/debug_python_paths.sh
            echo 'echo "Listing contents of Python library directory:"' >> /tmp/debug_python_paths.sh
            echo 'ls -al "$(dirname "${PYTHON_LIB}")" || true' >> /tmp/debug_python_paths.sh
            echo 'echo ""' >> /tmp/debug_python_paths.sh
            echo 'echo "Attempting to find libpython*.so or libpython*.a:"' >> /tmp/debug_python_paths.sh
            echo 'find "$(dirname "${PYTHON_LIB}")" -name "libpython*.so" || true' >> /tmp/debug_python_paths.sh
            echo 'find "$(dirname "${PYTHON_LIB}")" -name "libpython*.a" || true' >> /tmp/debug_python_paths.sh
            echo 'echo "--- End Debugging ---"' >> /tmp/debug_python_paths.sh
            echo '/usr/bin/yum update -y && /usr/bin/yum install -y swig' >> /tmp/debug_python_paths.sh
            
            # Make the script executable and run it
            chmod +x /tmp/debug_python_paths.sh
            /tmp/debug_python_paths.sh

          CIBW_CMAKE_OPTIONS: >
            -DPython_EXECUTABLE="${PYTHON_BIN}"
            -DPython3_EXECUTABLE="${PYTHON_BIN}"
            -DPython_INCLUDE_DIR="${PYTHON_INCLUDE_DIR}"
            -DPython3_INCLUDE_DIR="${PYTHON_INCLUDE_DIR}"
            -DPython_LIBRARY="${PYTHON_LIB}"
            -DPython3_LIBRARY="${PYTHON_LIB}"
            -DPython_ROOT_DIR="$(dirname "$(dirname "$PYTHON_BIN")")"
            -DPython3_ROOT_DIR="$(dirname "$(dirname "$PYTHON_BIN")")"
            -DPython_FIND_STRATEGY=LOCATION
            -DPython_FIND_REGISTRY=NEVER
            -DPython_FIND_FRAMEWORK=NEVER

          CIBW_SKIP: pp* cp36* cp37* cp38* *-win32 *-manylinux_i686 *-musllinux_*
          MACOSX_DEPLOYMENT_TARGET: 14

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-wheelhouse
          path: wheelhouse

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Set up environment
        run: |
          python -m pip install scikit-build-core build

      - name: Build and check sdist
        run: |
          python -m build --sdist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          name: sourcedist

  deploy:
    runs-on: ubuntu-latest
    needs: [build-wheel, build-sdist]
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}
    environment: deployment
    permissions:
      id-token: write # Required for OIDC authentication with PyPI

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.3
